#看二十遍吧，感觉链表的东西都在这呢，就是不太好调试，加油
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        if not head or not head.next:
            return
        else:
            mid=head
            end=head
            while end and end.next:
                mid=mid.next
                end=end.next.next
            n_node=mid.next
            tail=mid
            tail.next=None
            while n_node:
                nn_node=n_node.next
                n_node.next=tail
                tail=n_node
                n_node=nn_node
            node=head
            pre=head
            post=tail
            while tail.next != None:
                pre=pre.next
                post=post.next
                node.next=tail
                tail.next=pre
                node=pre
                tail=post
            node=head
            while node!=None:
                node=node.next
            return
#简洁版：
def reorderList(self, head):
    if not head:
        return
        
    # find the mid point
    slow = fast = head 
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    # reverse the second half in-place
    pre, node = None, slow
    while node:
        pre, node.next, node = node, pre, node.next
    
    # Merge in-place; Note : the last node of "first" and "second" are the same
    first, second = head, pre
    while second.next:
        first.next, first = second, first.next
        second.next, second = first, second.next
    return 
