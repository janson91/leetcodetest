# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        slow,fast=head,head
        while True:
            if not fast or not fast.next:
                return None
            slow=slow.next
            fast=fast.next.next
            if slow == fast:
                break
        while head!=slow:
            head=head.next
            slow=slow.next
        return head
