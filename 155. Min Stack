class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack=[]
        

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        if not len(self.stack):
            self.stack.append((x,x))
        else:
            self.stack.append((x,min(self.stack[-1][1],x)))
        

    def pop(self):
        """
        :rtype: void
        """
        self.stack.pop()
        

    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1][0]
        

    def getMin(self):
        """
        :rtype: int
        """
        return self.stack[-1][1]
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()

#这个方法不需要另外的O(n)的空间，挺厉害的

class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min_stack = []
        self.min_val = None
        

    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        if not self.min_stack:
            self.min_stack.append(0)
            self.min_val = x
        else:
            self.min_stack.append(x-self.min_val)
            if x < self.min_val:
                self.min_val = x
        

    def pop(self):
        """
        :rtype: void
        """
        v = self.min_stack.pop()
        if v < 0:
            self.min_val -= v
        
        

    def top(self):
        """
        :rtype: int
        """
        if self.min_stack[-1] < 0:
            return self.min_val
        else:
            return self.min_stack[-1] + self.min_val
        

    def getMin(self):
        """
        :rtype: int
        """
        return self.min_val
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
