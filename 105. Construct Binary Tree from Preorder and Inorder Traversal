#自己写的还是不够简洁
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if len(preorder) == 0:
            return None
        val = preorder[0]
        root = TreeNode(val)
        i = 0
        for i in range(len(inorder)):
            if inorder[i] == val:
                break
        root.left = self.buildTree(preorder[1:i+1],inorder[:i])
        root.right = self.buildTree(preorder[i+1:],inorder[i+1:])
        return root
        
#人家的，不需要对preorder特殊操作。另外取index直接就能取！！！为什么要搞个循环
def buildTree(self, preorder, inorder):
    if inorder:
        ind = inorder.index(preorder.pop(0))
        root = TreeNode(inorder[ind])
        root.left = self.buildTree(preorder, inorder[0:ind])
        root.right = self.buildTree(preorder, inorder[ind+1:])
        return root
#这是O(n)的方法
class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        def build(stop):
            if inorder and inorder[-1] != stop:
                root = TreeNode(preorder.pop()) # preorder gives root
                root.left = build(root.val) # build left child first
                inorder.pop() # finished building left-most subtree, so remove first inorder
                root.right = build(stop) # build right, stop when reached parent's root
                return root

        # reverse so that can pop from end
        preorder.reverse()
        inorder.reverse()
        return build(None)
