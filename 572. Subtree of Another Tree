#这个题如果这样就能过的话，那不算难，不过如果想提高，看下面，自己需要再学一些新知识
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        def dfs(s,t):
            if not s or not t:
                return s==t
            return s.val==t.val and dfs(s.left,t.left) and dfs(s.right,t.right)
        if s==None:
            return s==t
        return dfs(s,t) or self.isSubtree(s.left,t) or self.isSubtree(s.right,t)
        
#Advanced approach, O(|s| + |t|) (Merkle hashing):
#For each node in a tree, we can create node.merkle, a hash representing it's subtree.
#This hash is formed by hashing the concatenation of the merkle of the left child, the node's value, and the merkle of the right child. 
#Then, two trees are identical if and only if the merkle hash of their roots are equal (except when there is a hash collision.) 
#From there, finding the answer is straightforward: we simply check if any node in s has node.merkle == t.merkle
def isSubtree(self, s, t):
    from hashlib import sha256
    def hash_(x):
        S = sha256()
        S.update(x)
        return S.hexdigest()
        
    def merkle(node):
        if not node:
            return '#'
        m_left = merkle(node.left)
        m_right = merkle(node.right)
        node.merkle = hash_(m_left + str(node.val) + m_right)
        return node.merkle
        
    merkle(s)
    merkle(t)
    def dfs(node):
        if not node:
            return False
        return (node.merkle == t.merkle or 
                dfs(node.left) or dfs(node.right))
                    
    return dfs(s)
