#对于defaultdict的用法这次看到了，感觉这个题还可以再研究研究。挺有用的
class Node(object):
    def __init__(self):
        self.iskey=False
        self.children=collections.defaultdict(Node)
class Trie(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=Node()
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        node=self.root
        for i in word:
            node=node.children[i]
        node.iskey=True
                
        

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        node=self.root
        for i in word:
            node=node.children.get(i)
            if not node:
                return False
        return node.iskey
        

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        node=self.root
        for i in prefix:
            node=node.children.get(i)
            if not node:
                return False
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
