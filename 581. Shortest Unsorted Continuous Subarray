#这只是循环两边，理论上应该是O(n)的算法，但是accepted的结果还没有直接用sort的快，应该是和python的排序有关把，以后能少用for就少用for！！！
#139ms
class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return 0
        start = len(nums)
        end = 0
        m = nums[0]
        for i in range(1,len(nums)):
            if nums[i] < m:
                end = i
            m = max(m, nums[i])
        # print end
        for i in range(1,len(nums)+1):
            if nums[len(nums)-i] > m:
                start = len(nums) - i
            m = min(m, nums[len(nums)-i])
        # print start
        if end - start > 0:
            return end - start + 1
        else:
            return 0

#63ms
class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        snums = sorted(nums)
        s = e = -1
        for i in range(len(nums)):
            if nums[i] != snums[i]:
                if s == -1: s = i
                e = i
        if e != s:
            return e-s+1
        else:
            return 0
            
#58ms
class Solution(object):
    def findUnsortedSubarray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        left, i = 0, 1
        while i < n:
            if nums[i-1] > nums[i]:
                left = i-2
                break
            i += 1
        if i == n:
            return 0
        right, j = n-1, n-2
        while j > -1:
            if nums[j] > nums[j+1]:
                right = j+2
                break
            j -= 1
        min_ = min(nums[left+1:right])
        max_ = max(nums[left+1:right])
        while left > -1 and nums[left] > min_:
            left -= 1
        while right < n and nums[right] < max_:
            right += 1
        return right - left - 1            

