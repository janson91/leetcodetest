#人家的答案，不过我还是感觉有点问题
#思路
#To find the lowest common ancestor, we need to find where is p and q and a way to track their ancestors. 
#A parent pointer for each node found is good for the job. 
#After we found both p and q, we create a set of p's ancestors. 
#Then we travel through q's ancestors, the first one appears in p's is our answer.
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        stack = [root]
        parent = {root: None}
        while p not in parent or q not in parent:
            node = stack.pop()
            if node.left:
                parent[node.left] = node
                stack.append(node.left)
            if node.right:
                parent[node.right] = node
                stack.append(node.right)
        ancestors = set()
        while p:
            ancestors.add(p)
            p = parent[p]
        while q not in ancestors:
            q = parent[q]
        return q




#这个版本有问题，深度搜索没法处理有两个节点值一样的情况
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        pnodes=[]
        qnodes=[]
        
        def dfs(root,node,nodes):
            if not root:
                return False
            print root.val
            if root.val==node.val:
                nodes.append(node)
                return True
            if dfs(root.left,node,nodes) or dfs(root.right,node,nodes):
                nodes.append(root)
                return True
        dfs(root,p,pnodes)
        dfs(root,q,qnodes)
        if len(pnodes)==0:
            return q
        if len(qnodes)==0:
            return p
        print 'p',len(pnodes)
        for a in pnodes:
            print a.val
        print 'q',len(qnodes)
        for a in qnodes:
            print a.val
        res=None
        for i in range(min(len(pnodes),len(qnodes))):
            if pnodes[-i-1]==qnodes[-i-1]:
                res=pnodes[-i-1]
        return res
