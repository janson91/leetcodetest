#自己想出来，感觉还不错，不过优秀答案真是简洁优雅。
#另外要注意j-=a-1和自己想的一不一样，可能自己要实现的是j=j-a-1
class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        left=[0]*len(heights)
        right=[0]*len(heights)
        for i,n in enumerate(heights):
            j=i-1
            while j>=0:
                if heights[i]<heights[j]:
                    left[i]+=left[j]+1
                    j-=left[j]+1
                else:
                    if heights[i]==heights[j]:
                        left[i] +=left[j]+1
                    break
        reheights=heights[::-1]
        for i,n in enumerate(reheights):
            j=i-1
            while j>=0:
                if reheights[i]<reheights[j]:
                    right[i]+=right[j]+1
                    j-=right[j]+1
                else:
                    if reheights[i]==reheights[j]:
                        right[i]+=right[j]+1
                    break
        area=0
        for i in range(len(heights)):
            area=max(area,heights[i]*(left[i]+1+right[len(heights)-i-1]))
        return area
               
#人家的答案
def largestRectangleArea(self, height):
    height.append(0)
    stack = [-1]
    ans = 0
    for i in xrange(len(height)):
        while height[i] < height[stack[-1]]:
            h = height[stack.pop()]
            w = i - stack[-1] - 1
            ans = max(ans, h * w)
        stack.append(i)
    height.pop()
    return ans
